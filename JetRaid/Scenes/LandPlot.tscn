[gd_scene load_steps=5 format=3 uid="uid://d1ij0b1nvnino"]

[ext_resource type="Texture2D" uid="uid://cc1x66utxd2k0" path="res://Assets/Pixel.png" id="2_8smuk"]
[ext_resource type="Texture2D" uid="uid://b6g7n7dhd6u25" path="res://Assets/Rock.png" id="3_qt573"]

[sub_resource type="Shader" id="Shader_bjs8e"]
code = "shader_type canvas_item;

uniform vec2 VectorNoiseAmount = vec2(5.5,80.5);
uniform float Offset = 2344.0;
uniform float ColumnAmount = 3.0;
uniform float RowAmount = 5.0;
uniform vec4 waterColor : source_color = vec4(0.0,0.0,1.0,1.0);
uniform float speed = 1.0;


uniform int typeID : hint_range(0, 2) = 0;
uniform float smoothStepMin = 0.1;
uniform float smoothStepMax = 0.9;

uniform float circleRadius = 1.0;


vec2 random(vec2 uv) {;
	return vec2(fract(sin(dot(uv.xy,
		clamp(VectorNoiseAmount,vec2(0.1,0.1),vec2(1.0,1.0)))) * Offset));
}

float worley(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);
			point = vec2( cos(TIME * point.x * speed), sin(TIME * point.y * speed) ) * 0.5 + 0.5;
			
			
			//point = random(index_uv + neighbor);
		
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	return minimum_dist;
}



void fragment() {
	vec2 st = UV;
	st.y -= TIME * speed;
	float worley = worley(st, ColumnAmount, RowAmount);
	vec3 clampedWorley = clamp(vec3(worley),0.3,1.0);
	
	vec3 col = mix(clampedWorley,waterColor.rgb,0.9);
	
	switch(typeID){
		case 0:
			COLOR = vec4(col, 1.0);
			break;
		case 1:
			float sm = smoothstep(smoothStepMin,smoothStepMax,UV.x);
			COLOR = vec4(col,sm);
			break;
		case 2:
			float d = 1.0 - distance(vec2(0.5,0.5),UV) * circleRadius;
			COLOR = vec4(col,d);
			break;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_keye6"]
resource_local_to_scene = true
shader = SubResource("Shader_bjs8e")
shader_parameter/VectorNoiseAmount = Vector2(20, 20)
shader_parameter/Offset = 300.0
shader_parameter/ColumnAmount = 3.0
shader_parameter/RowAmount = 5.0
shader_parameter/waterColor = Color(0.980392, 0.937255, 0.607843, 1)
shader_parameter/speed = 0.001
shader_parameter/typeID = 2
shader_parameter/smoothStepMin = 0.1
shader_parameter/smoothStepMax = 0.9
shader_parameter/circleRadius = 2.16

[node name="LandPlot" type="Node2D"]

[node name="Sprite2D" type="Sprite2D" parent="."]
y_sort_enabled = true
material = SubResource("ShaderMaterial_keye6")
position = Vector2(2.38419e-07, -2)
scale = Vector2(224, 88)
texture = ExtResource("2_8smuk")

[node name="Sprite2D2" type="Sprite2D" parent="."]
y_sort_enabled = true
position = Vector2(-4.5, -64)
scale = Vector2(0.726563, 1)
texture = ExtResource("3_qt573")

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Area2D"]
polygon = PackedVector2Array(-40, -8, -32, 0, 0, 0, 16, 0, 40, -16, 32, -40, 24, -64, 16, -88, 8, -112, -8, -128, -16, -120, -24, -88, -32, -72, -40, -56, -40, -32, -48, -16)
